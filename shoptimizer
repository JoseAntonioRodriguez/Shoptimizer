#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
shoptimizer
~~~~~~~~~~~

This module contains the Shoptimizer main script.

"""


import sys
from datetime import datetime
import argparse
import textwrap
import csv
import os

from simpleodspy.sodsspreadsheet import SodsSpreadSheet
from simpleodspy.sodsods import SodsOds

from shops.mercadona import Mercadona
from shops.hipercor import Hipercor
from shops.eroski import Eroski


def parse_args():
    """Parse command line arguments"""

    parser = argparse.ArgumentParser(description=textwrap.dedent('''\
                                        Shoptimizer compares prices among several on-line supermarkets
                                        and export the results to an Open Document spreadsheet file (.ods).
                                        Currently supported supermarkets: Mercadona, Hipercor and Eroski'''),
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     usage='%(prog)s credentials [option]',
                                     add_help=False)

    credentials_group = parser.add_argument_group('supermarket info',
                                                  'A pair user/password and a shopping list name per supermarket')
    for shop_name in ('mercadona', 'hipercor', 'eroski'):
        credentials_group.add_argument('--' + shop_name,
                            nargs=3,
                            required=True,
                            help=shop_name.capitalize() + ' user/password and shopping list name',
                            metavar=('USER', 'PASS', 'LIST'),
                            dest=shop_name + '_info')
    options_group = parser.add_argument_group('options')
    options_group.add_argument('--output', '-o',
                        default='shop_list_' + datetime.now().strftime('%Y%m%d_%H%M%S') + '.ods',
                        help='file where comparison will be exported (.ods)',
                        metavar='FILE',
                        dest='ods_filename')
    options_group.add_argument('--input', '-i',
                        default='data/master_shopping_list.csv',
                        help='csv file storing the master shopping list',
                        metavar='FILE',
                        dest='master_product_list_filename')
    options_group.add_argument('--export-csv', '-e',
                        action='store_true',
                        help='export shopping lists as csv files',
                        dest='export_csv')
    options_group.add_argument('--help', '-h',
                        action='help',
                        help='show this help message and exit')
    options_group.add_argument('--version', '-v', action='version', version='%(prog)s 1.0')

    return parser.parse_args()


def export_ods(master_product_list, shop_list, ods_filename):
    """Export the product_dict data to a ODS file, using simpleodspy package."""

    COLS_PER_PRODUCT = 4

    table = SodsSpreadSheet(len(master_product_list), 1 + COLS_PER_PRODUCT * len(shop_list))

    # Set column widths
    table.setAt(0, 1, column_width='170pt')
    for i in range(len(shop_list)):
        table.setAt(0, i * COLS_PER_PRODUCT + 2, column_width='400pt')
        table.setAt(0, i * COLS_PER_PRODUCT + 3, column_width='50pt')
        table.setAt(0, i * COLS_PER_PRODUCT + 4, column_width='50pt')
        table.setAt(0, i * COLS_PER_PRODUCT + 5, column_width='50pt')

    for row, master_product in enumerate(master_product_list):
        row_str = str(row + 1)
        table.setValue('A' + row_str, master_product[0])

        # Build the formula to calculate the minimum price among several cells
        min_args = []
        for i in range(len(shop_list)):
            min_args.append('[.$' + chr(65 + i * COLS_PER_PRODUCT + 3) + '$' + row_str + ']')
        min_formula = 'MIN(' + ';'.join(min_args) + ')'

        for col, product_id in enumerate(master_product[1]):
            product = shop_list[col].get_product(product_id)
            if product is not None:
                formula = 'is-true-formula([.$' + chr(65 + col * COLS_PER_PRODUCT + 3) +\
                                            '$' + row_str + ']=' + min_formula + ')'
                table.setValue(chr(65 + col * COLS_PER_PRODUCT + 1) + row_str, product.name)
                table.setValue(chr(65 + col * COLS_PER_PRODUCT + 2) + row_str, product.price)
                table.setStyle(chr(65 + col * COLS_PER_PRODUCT + 2) + row_str, format='#.##0,00')
                table.setValue(chr(65 + col * COLS_PER_PRODUCT + 3) + row_str, product.unitary_price)
                table.setStyle(chr(65 + col * COLS_PER_PRODUCT + 3) + row_str, format='#.##0,00')
                table.setValue(chr(65 + col * COLS_PER_PRODUCT + 4) + row_str, 'â‚¬/' + product.unit)

                # Set conditional formatting to the whole product (only if unitary price is not zero)
                if product.unitary_price > 0.0:
                    table.setStyle(chr(65 + col * COLS_PER_PRODUCT + 1) + row_str + ':' +
                                   chr(65 + col * COLS_PER_PRODUCT + 4) + row_str,
                                   condition=formula, condition_background_color='#ffff99')

    table.setStyle('A1:' + chr(65 + COLS_PER_PRODUCT * len(shop_list)) + str(len(master_product_list)),
                   font_size='10pt')

    SodsOds(table).save(ods_filename)


def main():
    # Parse CLI arguments
    args = parse_args()

    # Get from environment which shops must be faked
    try:
        fake = os.environ["SHOPTIMIZER_FAKE"]
        fake = fake.split(';')
    except:
        fake = []

    # Create a list of supermarket objects
    shop_list = []
    shop_list.append(Mercadona(username=args.mercadona_info[0], password=args.mercadona_info[1],
                               list_name=args.mercadona_info[2], debug=True, verbose=True, fake='mercadona' in fake))
    shop_list.append(Hipercor(username=args.hipercor_info[0], password=args.hipercor_info[1],
                              list_name=args.hipercor_info[2], debug=True, verbose=True, fake='hipercor' in fake))
    shop_list.append(Eroski(username=args.eroski_info[0], password=args.eroski_info[1],
                            list_name=args.eroski_info[2], debug=True, verbose=True, fake='eroski' in fake))

    # Do the crawling
    for shop in shop_list:
        print 'Downloading shopping list from', shop.name, '...'
        shop.gather_products()

    # Export supermarket shopping list to csv if the option was set at CLI
    if args.export_csv:
        for shop in shop_list:
            shop.export_csv()

    # Import the master shopping list from a csv file
    with open(args.master_product_list_filename, 'rb') as csvfile:
        reader = csv.reader(csvfile)
        master_product_list = [(row[0], (row[1], row[2], row[3])) for row in reader]

    # Build the spreadsheet with the comparison results
    print 'Saving price comparison to', args.ods_filename, '...'
    export_ods(master_product_list, shop_list, args.ods_filename)

    return 0


if __name__ == '__main__':
    sys.exit(main())
